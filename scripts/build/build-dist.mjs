"use-strict";

import * as global from "../globals.mjs";
import {join, basename} from "path";
import * as fs from "fs";

// fixme Passed cli argument needs to match directory name generated by tsc
//   --outDir in package.json script call to work

// Ensure that a package.json exists in the root directory of the npm project
if ( ! fs.existsSync(global.ROOT_PKG_JSON_FILE_PATH))
{
    throw new Error(`"${global.ROOT_PKG_JSON_FILE_PATH}" doesn't exist`);
}

// Ensure that the package.json element is a file
if ( ! fs.lstatSync(global.ROOT_PKG_JSON_FILE_PATH).isFile())
{
    throw new Error(`"${global.ROOT_PKG_JSON_FILE_PATH}" is not a file`);
}

// If no distribution npm directory package name is passed via cli argument
if (process.argv.length !== 3)
{
    throw new Error(`1 command line argument expected. ${process.argv.length - 2} arguments passed`);
}

const formatRootPkgJsonForDist = pathToRootPkgJson =>
{
    // Ensure that a package.json exists in the root directory of the npm project
    if ( ! fs.existsSync(pathToRootPkgJson))
    {
        throw new Error(`"${pathToRootPkgJson}" doesn't exist`);
    }

    // Ensure that the package.json element is a file
    if ( ! fs.lstatSync(pathToRootPkgJson).isFile())
    {
        throw new Error(`"${pathToRootPkgJson}" is not a file`);
    }

    // Store the root package.json file as a string
    const rootPkgJsonString =
        fs.readFileSync(pathToRootPkgJson, {encoding: "utf-8"});

    // Return results from parsing package.json file
    const pkgJsonParseResult = function(jsonString)
    {
        try
        {
            return JSON.parse(jsonString);
        }
        catch (err)
        {
            throw new Error(`error parsing package.json at "${jsonString}"`);
        }
    }(rootPkgJsonString);

    // package.json properties to exclude from distributable package.json
    const rootPkgJsonPropsToExclude =
        ["config", "devDependencies", "private", "scripts"];

    // Distributable package.json JavaScript object
    const distPkgJsonObject =
        Object.fromEntries(Object.entries(pkgJsonParseResult)
                                 .filter(pkgJsonEntry => ! rootPkgJsonPropsToExclude.includes(pkgJsonEntry[0])));

    return JSON.stringify(distPkgJsonObject, null, 2);
};

// Use provided cli argument to set name of root distributable package directory
const distPkgDirPath = join(global.BUILD_DIST_DIR_PATH, process.argv[2]);

// Set path to root README file to copy into distributable package root directory
const rootReadMePath =
    join(global.NPM_ROOT_DIR_PATH,
         fs.readdirSync(global.NPM_ROOT_DIR_PATH, {withFileTypes: true})
           .find(dirent => dirent.isFile() && dirent.name.startsWith("README")).name);

// Set path to root LICENSE file to copy into distributable package root directory
const rootLicensePath =
    join(global.NPM_ROOT_DIR_PATH,
         fs.readdirSync(global.NPM_ROOT_DIR_PATH, {withFileTypes: true})
           .find(dirent => dirent.isFile() && dirent.name.startsWith("LICENSE")).name);

// If a root README file exists, copy it into root distributable package directory
if (fs.existsSync(rootReadMePath))
{
    const distReadMePath = join(distPkgDirPath, basename(rootReadMePath));

    fs.copyFile(rootReadMePath,
                distReadMePath,
                err => {
                    if (err) throw err;
                    else console.log(`README copied to:\n"${distReadMePath}"`);
                });
}

// If a root LICENSE file exists, copy it into root distributable package directory
if (fs.existsSync(rootLicensePath))
{
    const distLicensePath = join(distPkgDirPath, basename(rootLicensePath));

    fs.copyFile(rootLicensePath,
                distLicensePath,
                err => {
                    if (err) throw err;
                    else console.log(`LICENSE copied to:\n"${distLicensePath}"`);
                });
}

const distPkgJsonPath = join(distPkgDirPath, "package.json");

// Write distributable package.json object as string to resolved path
fs.writeFile(distPkgJsonPath,
             formatRootPkgJsonForDist(global.ROOT_PKG_JSON_FILE_PATH),
             {encoding: "utf-8"},
             err => {
                 if(err) throw err;
                 else console.log(`formatted dist package.json written to:\n"${distPkgJsonPath}"`);
             });
